# This Software (Dioptra) is being made available as a public service by the
# National Institute of Standards and Technology (NIST), an Agency of the United
# States Department of Commerce. This software was developed in part by employees of
# NIST and in part by NIST contractors. Copyright in portions of this software that
# were developed by NIST contractors has been licensed or assigned to NIST. Pursuant
# to Title 17 United States Code Section 105, works of NIST employees are not
# subject to copyright protection in the United States. However, NIST may hold
# international copyright in software created by its employees and domestic
# copyright (or licensing rights) in portions of software that were assigned or
# licensed to NIST. To the extent that NIST holds copyright in this software, it is
# being made available under the Creative Commons Attribution 4.0 International
# license (CC BY 4.0). The disclaimers of the CC BY 4.0 license apply to all parts
# of the software developed or licensed by NIST.
#
# ACCESS THE FULL CC BY 4.0 LICENSE HERE:
# https://creativecommons.org/licenses/by/4.0/legalcode
name: Docker images

on:
  schedule:
    - cron: "0 3 * * *" # everyday at 3am
  push:
    branches:
      - "main"
    tags:
      - "v*.*.*"
  pull_request:
    branches:
      - "main"

env:
  CODE_PKG_VERSION: 0.0.0
  PROJECT_PREFIX: securing-ai
  MINICONDA3_PREFIX: Miniconda3-py37_
  MINICONDA_VERSION: 4.10.3
  PYTORCH_VERSION: 1.7.1
  TENSORFLOW2_VERSION: 2.1.0

jobs:
  package-code:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - name: setup python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"

      - name: upgrade pip
        run: |
          # install pip=>20.1 to use "pip cache dir"
          python3 -m pip install --upgrade pip

      - name: install dependencies
        run: python3 -m pip install build

      - name: package the source code
        run: python3 -m build -sw

      - name: archive the code package
        uses: actions/upload-artifact@v2
        with:
          name: build-code-package
          path: dist

  build-docker-dioptra-apps:
    runs-on: ubuntu-20.04
    needs: package-code
    strategy:
      matrix:
        dioptra-app:
          - nginx
          - mlflow-tracking
          - restapi
          - pytorch-cpu
          - pytorch-gpu
          - tensorflow2-cpu
          - tensorflow2-gpu

    steps:
      - uses: actions/checkout@v2

      - name: set docker metadata
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: |
            ${{ env.PROJECT_PREFIX }}/${{ matrix.dioptra-app }}
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}},enable=${{ !startsWith(github.ref, 'refs/tags/v0.') }}
            type=sha,format=long,prefix=,suffix=
          labels: |
            maintainer=NCCoE Artificial Intelligence Team <ai-nccoe@nist.gov>, James Glasbrenner <jglasbrenner@mitre.org>
            org.opencontainers.image.title=${{ matrix.dioptra-app }}
            org.opencontainers.image.description=Provides the ${{ matrix.dioptra-app }} microservice within the Dioptra architecture.
            org.opencontainers.image.vendor=National Institute of Standards and Technology
            org.opencontainers.image.licenses=NIST-PD OR CC-BY-4.0
            org.opencontainers.image.documentation=https://pages.nist.gov/dioptra
            org.opencontainers.image.authors=NCCoE Artificial Intelligence Team <ai-nccoe@nist.gov>, James Glasbrenner <jglasbrenner@mitre.org>, Cory Miniter <jminiter@mitre.org>, Howard Huang <hhuang@mitre.org>, Julian Sexton <jtsexton@mitre.org>, Paul Rowe <prowe@mitre.org>

      - name: set up docker qemu
        uses: docker/setup-qemu-action@v1

      - name: set up docker buildx
        uses: docker/setup-buildx-action@v1

      - name: cache docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache-${{ matrix.dioptra-app }}
          key: ${{ runner.os }}-buildx-${{ matrix.dioptra-app }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ matrix.dioptra-app }}-

      - name: download packaged source code
        uses: actions/download-artifact@v2
        with:
          name: build-code-package
          path: dist

      - name: build and push
        uses: docker/build-push-action@v2
        if: ${{ github.event_name != 'schedule' }}
        with:
          context: .
          push: false
          file: docker/${{ matrix.dioptra-app }}/Dockerfile
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache-${{ matrix.dioptra-app }}
          cache-to: type=local,dest=/tmp/.buildx-cache-${{ matrix.dioptra-app }}-new
          build-args: |
            CODE_PKG_VERSION=${{ env.CODE_PKG_VERSION }}
            MINICONDA3_PREFIX=${{ env.MINICONDA3_PREFIX }}
            MINICONDA_VERSION=${{ env.MINICONDA_VERSION }}
            PROJECT_COMPONENT=${{ matrix.dioptra-app }}
            PROJECT_PREFIX=${{ env.PROJECT_PREFIX }}
            PYTORCH_VERSION=${{ env.PYTORCH_VERSION }}
            TENSORFLOW2_VERSION=${{ env.TENSORFLOW2_VERSION }}

      - name: build and push
        uses: docker/build-push-action@v2
        if: ${{ github.event_name == 'schedule' }}
        with:
          context: .
          push: false
          file: docker/${{ matrix.dioptra-app }}/Dockerfile
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          no-cache: true
          pull: true
          cache-to: type=local,dest=/tmp/.buildx-cache-${{ matrix.dioptra-app }}-new
          build-args: |
            CODE_PKG_VERSION=${{ env.CODE_PKG_VERSION }}
            MINICONDA3_PREFIX=${{ env.MINICONDA3_PREFIX }}
            MINICONDA_VERSION=${{ env.MINICONDA_VERSION }}
            PROJECT_COMPONENT=${{ matrix.dioptra-app }}
            PROJECT_PREFIX=${{ env.PROJECT_PREFIX }}
            PYTORCH_VERSION=${{ env.PYTORCH_VERSION }}
            TENSORFLOW2_VERSION=${{ env.TENSORFLOW2_VERSION }}

      # Temp fix
      # https://github.com/docker/build-push-action/issues/252
      # https://github.com/moby/buildkit/issues/1896
      - name: move docker build cache
        run: |
          rm -rf /tmp/.buildx-cache-${{ matrix.dioptra-app }}
          mv /tmp/.buildx-cache-${{ matrix.dioptra-app }}-new /tmp/.buildx-cache-${{ matrix.dioptra-app }}

      - name: build and export images for integration testing
        uses: docker/build-push-action@v2
        with:
          context: .
          push: false
          file: docker/${{ matrix.dioptra-app }}/Dockerfile
          tags: ${{ env.PROJECT_PREFIX }}/${{ matrix.dioptra-app }}:dev
          cache-from: type=local,src=/tmp/.buildx-cache-${{ matrix.dioptra-app }}
          cache-to: type=local,dest=/tmp/.buildx-cache-${{ matrix.dioptra-app }}-new
          outputs: type=docker,dest=/tmp/${{ env.PROJECT_PREFIX }}_${{ matrix.dioptra-app }}_dev.tar
          build-args: |
            CODE_PKG_VERSION=${{ env.CODE_PKG_VERSION }}
            MINICONDA3_PREFIX=${{ env.MINICONDA3_PREFIX }}
            MINICONDA_VERSION=${{ env.MINICONDA_VERSION }}
            PROJECT_COMPONENT=${{ matrix.dioptra-app }}
            PROJECT_PREFIX=${{ env.PROJECT_PREFIX }}
            PYTORCH_VERSION=${{ env.PYTORCH_VERSION }}
            TENSORFLOW2_VERSION=${{ env.TENSORFLOW2_VERSION }}

      # Temp fix
      # https://github.com/docker/build-push-action/issues/252
      # https://github.com/moby/buildkit/issues/1896
      - name: move docker build cache
        run: |
          rm -rf /tmp/.buildx-cache-${{ matrix.dioptra-app }}
          mv /tmp/.buildx-cache-${{ matrix.dioptra-app }}-new /tmp/.buildx-cache-${{ matrix.dioptra-app }}

      - name: archive the docker integration testing images
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.PROJECT_PREFIX }}-${{ matrix.dioptra-app }}-dev-image
          path: /tmp/${{ env.PROJECT_PREFIX }}_${{ matrix.dioptra-app }}_dev.tar

  integration-test:
    runs-on: ubuntu-20.04
    needs: build-docker-dioptra-apps
    strategy:
      matrix:
        tox-env:
          - integration-hello-world

    steps:
      - uses: actions/checkout@v2

      - name: setup python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"

      - name: upgrade pip
        run: |
          # install pip=>20.1 to use "pip cache dir"
          python3 -m pip install --upgrade pip

      - name: get pip cache dir
        id: pip-cache
        run: echo "::set-output name=dir::$(pip cache dir)"

      - name: cache dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('**/tox.ini') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: install dependencies
        run: python3 -m pip install tox

      - name: download the nginx docker integration testing image
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.PROJECT_PREFIX }}-nginx-dev-image
          path: /tmp

      - name: download the mlflow-tracking docker integration testing image
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.PROJECT_PREFIX }}-mlflow-tracking-dev-image
          path: /tmp

      - name: download the restapi docker integration testing image
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.PROJECT_PREFIX }}-restapi-dev-image
          path: /tmp

      - name: download the tensorflow2-cpu docker integration testing image
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.PROJECT_PREFIX }}-tensorflow2-cpu-dev-image
          path: /tmp

      - name: set up docker qemu
        uses: docker/setup-qemu-action@v1

      - name: set up docker buildx
        uses: docker/setup-buildx-action@v1

      - name: load the integration testing docker images
        run: |
          docker load --input /tmp/${{ env.PROJECT_PREFIX }}_nginx_dev.tar
          docker load --input /tmp/${{ env.PROJECT_PREFIX }}_mlflow-tracking_dev.tar
          docker load --input /tmp/${{ env.PROJECT_PREFIX }}_restapi_dev.tar
          docker load --input /tmp/${{ env.PROJECT_PREFIX }}_tensorflow2-cpu_dev.tar

      - name: run ${{ matrix.tox-env }} test
        run: tox -e ${{ matrix.tox-env }}
